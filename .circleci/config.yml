version: 2.1

jobs:

  # build-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   # working_directory: ~/project/.circleci/ansible/inventory.txt
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Build front-end
  #         command: |
  #           exit 0
  #           cd frontend
  #           npm run build:prod
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-build

  # build-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Back-end build
  #         command: |
  #           cd backend
  #           npm install
  #           npm run build
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build

  # test-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Test front-end
  #         command: |
  #           cd frontend
  #           npm install
  #           npm install oauth-sign
  #           # npm run build
  #           npm run test
                
  # test-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Test Back-end
  #         command: |
  #           exit 0
  #           cd backend
  #           npm run test

  # scan-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Scan front-end
  #         command: |
  #           exit 0
  #           npm audit

  # scan-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Scan Back-end
  #         command: |
  #           exit 0
  #           npm audit

  # deploy-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install -y tar gzip
  #     - run:
  #         name: Ensure back-end infrastructure exists
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/backend.yml \
  #             --tags project=udapeople \
  #             --stack-name "backend" \
  #             --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:5}

  #     - run:
  #         name: Ensure front-end infrastructure exist
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/frontend.yml \
  #             --tags project=udapeople \
  #             --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:5}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"
  #     - run:
  #         name: Add back-end ip to ansible inventory
  #         command: |
  #           aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt

  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project/.circleci/ansible/inventory.txt 

  #  configure-infrastructure:
  #   docker:
  #     - image: mareimorsy/aws-node
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["9b:92:e3:f5:aa:a7:bc:6b:bc:43:1f:a8:3b:89:10:49"]
  #     # - run:
  #     #     name: "Install Dependencies"
  #     #     command: |
  #     #       apk add ansible gzip openssh-client
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Configure server
  #         command: |
  #           ls
  #           pwd
  #           cd .circleci/ansible
  #           aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt configure-server.yml -vv
  #           #ansible-playbook -i inventory.txt prometheus-exporter.yml -vv
  #     # Here's where you will add some code to rollback on failure      

   run-migrations:
    docker: 
      - image: mareimorsy/aws-node

    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations

      # - run:
      #     name: Send migration results to memstash
      #     command: |
      #       # Your code here
      #       exit 1
     # Here's where you will add some code to rollback on failure      


workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:      
      #- configure-infrastructure
      - run-migrations
          #  requires: [configure-infrastructure]    